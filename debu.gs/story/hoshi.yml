--- 
format: html
blog: debugs
author: Pete Elmore
title: Hoshi
published: 2008-11-06 00:00:00 -08:00
tags: ""
content: |-
  <h2>Summary</h2>
  
  <p>Hoshi is a library for creating real first-class HTML/XML views.  So,
  unlike template libraries, you can take advantage of mixins,
  inheritance, and all the other wonderful features of Ruby's object
  system.</p>
  
  <p>Hoshi is designed to:<ul>
  	<li>Generate clean HTML/XHTML/XML with minimal effort</li>
  	<li>Be easy for a coder to use and understand</li>
  	<li>Take full advantage of Ruby's object sytem</li>
  	<li>Be more readable and easier to write than bare HTML</li>
  </ul></p>
  
  <p>It is semi-modeled after Markaby, but with a much more straightforward
  implementation and different semantics (e.g., no instance_eval, so scope
  inside a tag is as expected).  Hoshi also allows a tag to follow another
  tag without requiring any &lt;&lt;, +, or +=.</p>
  
  <h2>Installation</h2>
  
  <p>You can install via rubygems,</p>
  
  <pre>
    gem install hoshi
  </pre>
  
  <p>or by downloading from <a href="http://github.com/pete/hoshi">github</a></p>
  
  <h2>Usage</h2>
  
  <p>These should be fairly straightforward:</p>
  
  <pre>
    require 'hoshi'
  
    class Trivial &lt; Hoshi::View :html4
      def show
        doctype
        html {
          head {
            title "Hello, world!"
            link :rel =&gt; 'stylesheet', :href =&gt; '/css/hoshi.css'
          }
  
          body {
            h1 "Hello, world!"
            p "This is a greeting to the world."
          }
        }
        render
      end
    end
  
    puts Trivial.new.show
  </pre>
  
  <p>You can get a little more complicated:</p>
  
  <pre>
    require 'hoshi'
    require 'cgi'
  
    module Layout
      def main_page(t)
        doctype
        html {
          head {
            title t
            script(:type =&gt; 'text/javascript') {
              raw "alert(\"Hi, I'm some javascript, I suppose.\");"
            }
          }
  
          body {
            h1 t, :class =&gt; 'page_title'
  
            yield
          }
        }
      end
  
      def list_page(t)
        main_page(t) {
          ul {
            yield
          }
        }
      end
    end
  
  
    class Fibonacci &lt; Hoshi::View :xhtml1
      include Layout
  
      def list_page(n)
        super("Fibonacci: f(0)..f(#{n})") {
          fib_upto(n).map { |i| li i.to_s }
        }
        CGI.pretty(render)
      end
  
      private
  
      def fib_upto n
        a = Array.new(n) 
  
        0.upto(n) { |i|
          a[i] = 
            if i &lt; 2
              1
            else
              a[i - 1] + a[i - 2]
            end
        }
  
        a
      end
    end
  
    puts Fibonacci.new.list_page(n)
  </pre>
  
  <p>These examples and more featured in the fabulous doc/examples directory.
  Also, there is a program included called html2hoshi (and associated
  lib/html2hoshi.rb; see Hoshi.from_html) that takes HTML as input and
  converts it to Ruby code using Hoshi.</p>
  
  <h2>Bugs</h2>
  
  <p>There needs to be some work done on correcting the tags.</p>
  
  <h2>Credits</h2>
  
  <ul>
  	<li>Pete Elmore -- (pete.elmore(a)gmail.com)</li>
  
  	<li>Dan Yoder -- (danyoder(a)mac.com)</li>
  </ul>
  
  <p>Also, I guess I should credit 
  <a href="http://attractiveeightieswomen.com/">Attractive Eighties Women</a>,
  since I was blasting them the whole time I was developing this.  Like, over and
  over.  I couldn't stop listening.  My friends and family are becoming
  concerned.  I don't feel that I am yet ready to take the first step by
  admitting there is a problem.  Intervention may be required.  This paragraph
  should probably be considered a cry for help.</p>
summary: ""
key: hoshi
