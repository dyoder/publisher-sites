--- 
name: classic-tutorial-1
format: textile
blog: ""
title: Getting Started with Classic Applications
author: Matthew King
published: 2008-12-22 00:00:00 -08:00
domain: dan.local
tags: ""
content: |-
  h2.  Get Waves
  
  <pre>
    $ gem install waves
  </pre>
  
  You can also "run from source":/working-from-source if you like.
  
  h2. Fire it up
  
  <pre>
    $ waves generate --name=blog --orm=sequel
    ** Waves 0.8.0 **
    ** Creating new Waves application ...
    ** Application created!
  </pre>
  
  The @waves@ command has many powers.  You may obtain descriptions of these powers by running @waves help@ or @waves <command> --help@.  Here are two more you'll use in this tutorial:
  
  <pre>
    $ cd blog
  
    # run the web server
    $ waves server
  
    # irb-based console
    $ waves console
  </pre>
  
  Invoking @waves generate@ creates a directory named @blog@, in the current directory, defaulting to the _classic_ template.  The generator uses the constant-cased version of the value given to @--name@ as the name of the top level application module, in this case @Blog@. You can follow along with the commits listed with code examples by cloning the "tutorial repository at GitHub":http://github.com/waves/classic-tutorial .  
  
  The classic application we just generated has this basic directory structure:
  
  <pre>
    ./
      configurations/  # (auto_load || auto_create)
      controllers/     # (auto_load || auto_create)
      helpers/         # (auto_load || auto_create)
      lib/             
        tasks/         # *.rb/*.rake files automatically required by the Rakefile
      models/          # (auto_load || auto_create)
      public/          # Images, css, javascript, misc. assets
      Rakefile         # 
      resources/       # (auto_load || auto_create)
      schema/          
        migrations/    
      startup.rb       # app module requires/includes the foundation and layers 
      templates/       # Views expect templates to live here.
      views/           # (auto_load || auto_create)
  </pre>
  
  Take a look at @startup.rb@ first, because that is where the Waves runtime (i.e. console or server) starts. You can, when feeling especially contrary, point the @waves@ command at a different file using the @--startup@ option.  A startup file should require a foundation, establish your application namespace, and include any additional "layers":http://www.rubywaves.com/foundations-and-layers needed for your app.
  
  p(commit). "startup.rb @ 87a52084":http://github.com/waves/classic-tutorial/tree/87a52084/startup.rb
  
  <pre>
    require 'foundations/classic'
    require 'layers/orm/providers/sequel'
  
    module Blog
      include Waves::Foundations::Classic
      include Waves::Layers::ORM::Sequel
    end
  </pre>
  
  The classic template is the default, so we did not have to specify --template=classic.  We did specify --orm=sequel, which is why the startup file requires and includes the Sequel "layer":/foundations-and-layers.
  
  @Waves::Foundations::Classic@ imbues a Ruby module with internal namespaces and expectations. The actual working classes live in these namespaces.  E.g. @Blog::Resources::Entry@, @Blog::Models::Comment@.
  
  The otherwise harsh birth and life of these working classes is softened by "AutoCode":http://autocode.rubyforge.org, a sort of mini-Industrial Revolution for Ruby constants.  The classic foundation configures AutoCode to automatically instantiate undefined resources, controllers, models, views, etc. by looking for a file in a path that corresponds to the namespaced constant name.  If such exists, Waves will @auto_load@ the constant from the file.  If not, Waves will @auto_create@ the class or module from sensible defaults defined by the foundation.  
  
  For example, when Waves encounters @Blog::Resources::Entry@ for the first time, it tries to load it from @resources/entry.rb@.  If that file does not exist, the app clones @Blog::Resources::Entry@ from a basic resource class.
  
  The happy result is that you only need to write resources, models, etc. _when the default behavior stops meeting your needs._
  
  h2. Basic setup for the Blog application
  
  Our application uses Sequel, because we told it to, connecting to an SQLite database named blog.db at the top level of the project directory.  You can change the database settings in @configurations/development.rb@, on which more later.  Classic apps can render .erb and .mab templates; for this tutorial, we'll use Markaby.  Our database needs a schema, our views will need a layout, and our layout will need some styles. Rather than elaborating on the development of these things, we present with minimal comment some basic setup files.
  
  Run @rake schema:migration name=initial_schema@, which creates @schema/migrations/001_initial_schema.rb@.  Replace that files contents with the following code, then run @rake schema:migrate@.
  
  p(commit). "schema/migrations/001_initial_schema.rb @ e6b1eec":http://github.com/waves/classic-tutorial/tree/e6b1eec/schema/migrations/001_initial_schema.rb
  
  <pre>
  class InitialSchema < Sequel::Migration
  
    def up
      create_table :entries do
        primary_key :id
        string :name
        string :title
        text :content
        timestamp :updated_on
      end
  
      create_table :comments do
        primary_key :id
        foreign_key :entry_id, :table => :entries
        string :name
        string :email
        text :content
        timestamp :updated_on
      end
    end
  
    def down
      drop_table :entries
      drop_table :comments
    end
  
  end
  </pre>
  
  Replace the content of @templates/layout/default.mab@ with this Markaby code:
  
  p(commit). "templates/layout/default.mab @ e6b1eec":http://github.com/waves/classic-tutorial/tree/e6b1eec/templates/layout/default.mab
  
  <pre>
  doctype :html4_strict
  
  html do
  
    head do
      title @title
      script :src => '/javascript/jquery-1.2.6.min.js', :type => 'text/javascript'
      script :src => '/javascript/site.js', :type => 'text/javascript'
      link :href => '/css/site.css', :rel => 'stylesheet', :type => 'text/css'
    end
  
    body do
      h1 { a 'I Am Blog!', :href => '/entries' }
      div.main do
        layout_content
      end
    end
  
  end
  
  </pre>
  
  Create @public/css/site.css@ with these styles:
  
  p(commit). "public/css/site.css @ e6b1eec":http://github.com/waves/classic-tutorial/tree/e6b1eec/public/css/site.css
  
  <pre>
  body { font-size: 16px; line-height: 20px; 
    font-family: Georgia, serif; background: white; margin: 0 10%;}
  a { color: green; text-decoration: none; }
  h1, h2, h3, h4, p, hr, div { padding: 0px; margin-bottom: 20px; }
  h1, h2, h3, h4, form * { font-family: sans-serif }
  h1 { font-size: 45px; line-height: 45px; padding-bottom: 13px; 
    border-bottom: 2px solid black;}
  h2 { font-size: 20px; line-height: 20px;}
  h4 { padding: 0px; margin: 0px; }
  a.delete { color: maroon; }
  div.main { width: 100%;}
  div.create { margin-left: 20px; float: right; }
  div.entry { border-bottom: 2px solid silver; }
  div.comment { border-bottom: 1px solid silver;}
  div.comment p.info { font-style: italic;}
  </pre>
  
  Download "jquery-1.2.6.min.js":http://jqueryjs.googlecode.com/files/jquery-1.2.6.min.js and place it in @public/javascript/@
  
  Create @public/javascript/site.js@, and leave it empty for now.
  
  h2. Request matching
  
  Fire up the application server by running @waves server@ in your project directory.  Then visit "http://localhost:3000":http://localhost:3000 in your browser.  Any path you request will return a 404 Not Found at this point.  
  
  The most basic task of any web application is to determine how to handle any particular HTTP request.  A common solution employs a sort of routing table that matches requests by path, then maps them to specific functions or methods.  Waves provides a request matching DSL that resembles these solutions on the surface, though what goes on below is "far more interesting":/resource-oriented.  In a nutshell, Waves dispatches a request by passing it to a primary resource, which may process the response or pass the request on to another resource.
  
  The default point of entry for request dispatching in your app is @Blog::Resources::Map@.  We start by declaring a simple and not terribly useful request matcher in @resources/map.rb@
  
  p(commit). "resources/map.rb @ c583e98":http://github.com/waves/classic-tutorial/tree/c583e98/resources/map.rb
  
  <pre>
  module Blog
    module Resources
      class Map
        include Waves::Resources::Mixin
  
        on( true ) { "I am Blog!" }
  
      end
    end
  end
  </pre>
  
  Waves uses the return value of the block given to @on@ as the content of the response body (assuming the request matches the declaration).  The first argument to @on@ matches against the HTTP method, as represented by a lower-cased symbol (e.g. @:get@).  @true@ matches anything.  Thus the @on@ declaration we added means: On any request, return "I am Blog!" as the response body.
  
  @on@ can also match against the path components of the request URI, when passed an array as the second argument.  For example, the declaration below will only match GET requests to @/who/are/you@:
  
  <pre>
    on( :get, [ "who", "are", "you" ] ) { "I am Blog!  Hear me roar." }
  </pre>
  
  A third argument to @on@ allows you to match needful headers:
  
  <pre>
    on( :get, true, :accept => :css ) { # do something clever }
  </pre>
  
  
  h2. The shape of things to come
  
  Our app isn't throwing 404s anymore, but a blog ought to have a little more _nuance_.  Entries, a list of entries, perhaps even comments.  Here is how we will structure our application API:
  
  * a GET to @/entries@ displays a list of blog entries
  * a POST to @/entries@ creates a new blog entry
  * a GET to @/entry/:name@ displays the blog entry identified by @:name@
  * a PUT to @/entry/:name@ updates the blog entry
  * a DELETE to @/entry/:name@ deletes the blog entry
  * a POST to @/entry/:name@ adds a comment to the blog entry
  
  
  "Part 2":/classic-tutorial-2
summary: ""
key: classic-tutorial-1
