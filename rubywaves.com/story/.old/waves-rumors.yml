--- 
format: textile
blog: hang-ten
author: Roberto Gamboni
title: Waves Rumors
published: 2009-03-07 00:00:00 -08:00
tags: ""
content: |-
  No big news, but I thought someone needed to update the blog, since we have been hard at work hacking Waves. Luckily the commits always tell the truth, which is that there are interesting new features coming out with the (imminent) 0.83 release of Waves.
  
  For example, Waves now fully supports "HTTP caching":http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html, thanks to the integration of "Rack::Cache":http://tomayko.com/src/rack-cache/, a piece of Rack middleware that implements most of RFC 2616's caching features. Rack::Cache relies entirely on standard HTTP headers produced by your application, so (ndr: finally) there is no need for an application level caching API. The following HTTP caching features are currently supported:
  
  _Expiration-based caching_. Responses are served from cache while fresh without consulting the backend application. The Cache-Control: max-age=N and Expires response headers control a response&rsquo;s freshness lifetime.
  
  _Validation_. The cache stores responses even if no freshness information is present so long as there&rsquo;s a cache validator (Last-Modified or ETag). Subsequent requests result in a conditional GET request to the application and if the stored response is unmodified, it is served from cache. Your backend should never generate the same response twice.
  
  _Vary support_. This allows your applicatio to cache different responses for the same URI based on encoding, media-type, etc. This is crucial for REST since resources may support multiple representations.
  
  We've also improved the handling of Accepts header, adding support for "Content-Negotiation":http://httpd.apache.org/docs/1.3/content-negotiation.html to meet the HTTP/1.1 specification. Waves applications can now choose the best representation of a resource based on the client-supplied preferences for media type, languages and character set. Ah, are you wondering how to deal with Content-Negotiation when your client is a browsers?? Ok, we thought about that, and we decide to expose the extension of the URI for such situation. 
  
  So, what's coming next? Expect to see soon other news from other members of the team, as well as how-to type docs related to the new features. What's brewing between the cubicles: management and monitoring support using "Rinda":http://segment7.net/projects/ruby/drb/rinda/ringserver.html, "PoolParty":http://labs.citrusbyte.com/poolparty integration, memoization support in functor to speed request matching, "Hoshi":http://github.com/pete/hoshi/tree/master and "Cssy":http://github.com/automatthew/cassandra/tree/master integration. Enough to keep an eye on.
summary: No big news, but I thought someone needed to update the blog, since we have been hard at work hacking Waves. Luckily the commits always tell the truth, which is that there are interesting new features coming out with the (imminent) 0.83 release of Waves.
key: waves-rumors
