--- 
format: textile
title: Inheritable Configurations
author: Dan Yoder
published: 2008-11-06 00:00:00 -08:00
tags: ""
content: |-
  In Waves, Configurations are just classes with methods that set and get attributes. This allows you to inherit, extend, and override configuration attribute values and semantics just like you would any other class. That said, Configurations are never instantiated, so in that regard they are treated differently than a typical Ruby class.
  
  Defining a configuration is quite straightforward: just inherit from @Waves::Configurations::Base@ or (if you want some reasonable defaults already set up for you), @Waves::Configurations::Default@.
  
  <pre>
  class MyConfiguration < Waves::Configurations::Base
    attributes( :host, :port, :server )
  
    def self.foo( val )
      self['application'] = val
      # also do something else unusual
    end
  
    host '0.0.0.0'
    port 4000
    server Waves::Servers::Mongrel
    foo 'bar'
  end
  </pre>
  
  What this simple configuration does is define class getter and setter methods for @host@, @port@, and @server@. It also defines a "custom" attribute, @foo@, which adds a little bit of logic to the setter. We then proceed to set these attributes. Requiring them to be declared first avoids the insidious problem of subtly mispelling an attribute and then wondering why it isn't set correctly.
  
  (Configuration attributes in Waves are a little unusual in that the setter methods actually re-define the getters to return whatever value was just set, as opposed to storing them in a Hash. The idea here was to squeeze a little extra speed out of accessing configuration values, but it add just enough unexpected weirdness that we will likely use normal class attributes in a future release.)
  
  At any rate, we can also inherit from the Default configuration, which gives us a whole bunch of predefined attributes along with some default settings. These include:
  
  * *@server@, @host@, and @port@.* The only mystery here is the @server@ attribute which specifies which server you want to use. Waves provides several "built-in servers":http://waves.rubyforge.org/classes/Waves/Servers.html and we will continue to add more, since they are simply wrappers around Rack::Handlers to provide them with a more uniform interface.
  
  * *@log@.* Allows you to configure the Waves logger, which is based on the built-in Ruby Logger, using a simple options Hash.
  
    <pre>
    log :level => :info, :output => $stderr
    log :level => :error, :output => ( "log.#{$$}" ), :rotation => :weekly
    </pre>
  
  * *@reloadable@.* Determines which modules Waves will call @reload@ on when @Waves.reload@ is invoked. Typically, these modules will have mixed in AutoCode (done automatically for you in some Foundations) to provide automated code-reloading.
  
  * *@resource@.* Sets the application resource class. This is often just a proxy that delegates to appropriate resources handled by the application.
  
  * *@database@.* If you are using an ORM (not required), you will want to pass the initialization object for the ORM (connection string, options Hash, whatever) as the value for this attribute.
  
  * *@debug@.* Set to true if you are running in @debug@ mode. This value is accessible from within your application and also determines the level of synchronization and whether code-reloading is done automatically.
  
  * *@cache@.* Set the main Waves cache (accessible via @Waves.cache@) to whatever cache object you want to use. (Waves provides several "simple options.":http://waves.rubyforge.org/classes/Waves/Caches.html.)
  
  * *@application@.* Defines your Rack application. Set by default to be:
  
  <pre>
  use ::Rack::ShowExceptions
  use Rack::Session::Cookie, :key => 'rack.session',
  :path => '/', :expire_after => 2592000, :secret => 'Change it'
  run ::Waves::Dispatchers::Default.new
  </pre>
  
  A common way to take advantage of inheritable configurations is to provide a shared base configuration, and then at least 2 subclasses, @Development@ and @Production@. These, in turn, may also have subclass to deal with variations for testing, staging, custom deployments, and so on. You might even create a Layer that is reused across your applications to configure a Default for you and thus update all your applications when, say, you change the database configuration.
key: configurations
