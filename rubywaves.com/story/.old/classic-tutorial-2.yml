--- 
name: classic-tutorial-2
format: textile
blog: ""
title: Classic Applications, part 2
author: Matthew King
published: 2008-12-26 00:00:00 -08:00
domain: dan.local
tags: ""
content: |-
  Our blog needs content, and hard coding it into @on@ declarations in @Blog::Resources::Map@ falls more into the category of funny than practical.  The Sequel migration supplied in "Part 1":/classic-tutorial-1 establishes the database schema we need to store entries and comments, but we haven't created any Sequel models to manipulate those tables.  Notwithstanding and nevertheless, my friends, you can still do this:
  
  <pre>
    $ waves console
    ...
    >> Blog::Models::Entry.count
    => 0
  
    >> Blog::Models::Entry.superclass
    => Blog::Models::Default
  
    >> Blog::Models::Entry.superclass.superclass
    => Sequel::Model
  </pre>
  
  h2. Just in time
  
  The Sequel ORM layer, by virtue of AutoCode, handles missing model constants by cloning them from a basic model when the presumptive model file cannot be found in the presumed location.  This basic model inherits from @Models::Default@, as you can see from the console session, and @Models::Default@ inherits from @Sequel::Model@.  After cloning the missing model, the Sequel layer sets the table name as the snake case of the model classname.  Thus @Models::Entry@ uses the @entries@ table, and @Models::Comment@ uses the @comments@ table.
  
  This may be enough for some simple applications, but most apps are likely to need more.  You can write your own models and still benefit from the AutoCode setup by placing your model files in the obvious place, using the snake case of the model class as the file name, and subclassing @YourApp::Models::Default@.  For our blog application, we need to associate comments with entries, add timestamping callbacks, and define some display helpers.
  
  p(commit). "models/entry.rb @ 0fcd528":http://github.com/waves/classic-tutorial/tree/0fcd528/models/entry.rb
  
  <pre>
  module Blog
    module Models
      class Entry < Default
        one_to_many :comments, :class => Blog::Models::Comment, 
          :key => :entry_id, :order => :updated_on
        before_save do
          set_with_params(:updated_on => Time.now)
        end
  
        def date
          updated_on.strftime('%b %d, %Y')
        end
  
        def comment_number
          n = comments.size
          case n
          when 0
            "No Comments"
          when 1
            "1 Comment"
          else
            "#{n} Comments"
          end
        end
      end
    end
  end
  </pre>
  
  p(commit). "models/comment.rb @ 0fcd528":http://github.com/waves/classic-tutorial/tree/0fcd528/models/comment.rb
  
  <pre>
  module Blog
    module Models
      class Comment < Default
        many_to_one :entry, :class => Blog::Models::Entry
        before_save do
          set_with_params(:updated_on => Time.now)
        end
  
        def time
          updated_on.strftime('%I:%M %p on %b %d, %Y')
        end
  
        def attribution
          name.nil? || name.empty?  ? 'anonymous coward' : name
        end
      end
    end
  end
  </pre>
  
  <i>Note:  the rake task for generating models is broken in 0.8.2.  Otherwise, we'd be using it.</i>
  
  The same basic pattern of auto-generation applies to controllers, views, and resources.  Mention a constant, and it springs forth full-grown, like "Athena":http://www.uwm.edu/Course/mythology/0500/707.jpg from the head of Zeus.  Controllers come with a set of basic model-accessing methods appropriate to the active ORM.  Views come loaded with template renderers (such as Markaby) and the knowledge to properly use them.  Resources come with a request-processing DSL, part of which you have already seen.
  
  h2. Controllers and Views
  
  Controllers are of limited importance in Waves, as compared to Rails.  They act as adapters between the input parameters derived from the request (captured URL components as well as actual query params) and the ORM model.  If we think of the resource as a general contractor, the controller is a subcontractor.  The general contractor doesn't need to know where the job materials are acquired, or how they are prepared.  He needs a dog house, and it should be blue and have a carpeted interior and a Hank Williams poster.  The resource doesn't need to know how to query a model.  Conversely, the model doesn't need to know anything about HTTP request attributes.  Home Depot doesn't care why customers are buying paint and carpet remnants.  The controller is the intermediary responsible for taking an order from the resource and retrieving the desired materials from the model.
  
  When an app includes an ORM layer, that layer decorates the default controller with a set of @all@, @find@, @create@, @update@, and @delete@ methods, but you can redefine these or add your own.  A resource mapping can then pass whatever parameters it thinks relevant to the appropriate controller method:
  
  <pre>
    # Pretend that 'controller' below is an instance of Blog::Controllers::Entry
  
    @entries = controller.all
    @entries = controller.published_before(params.date)
  </pre>
  
  Views are also subcontractors, by the already overstretched analogy.  The resource gives the view a shipment of materials, which the view assembles into the finished object.  Because views are first class citizens in Waves, you have a great deal of flexibility in telling them how to go about their business.  The path of least resistance is to create template files in @templates/<view_name>@.  Thanks to the magic of @method_missing@, you can render that template by calling its name as a method on the view (word to the wise:  don't name a template file "render").
  
  <pre>
    # Pretend we have a Markaby template at templates/entry/list.mab
    # Also pretend that 'view' below is an instance of Blog::Views::Entry
  
    view.list(:entries => @entries)
  </pre>
  
  You can easily define your own view methods, to allow the rendering of arbitrary template strings, for example, or to filter an already rendered template.  A view method might be as simple as a call to @to_csv@, or as complex as a PDF-rendering job, with time-limited caching on the side.
  
  
  h2. The dog house
  
  Time to stop puttering around and build a working blog.  Replace the useless request matcher in @resources/map.rb@ with these two mappings:
  
  p(commit). "resources/map.rb @ 1df8696":http://github.com/waves/classic-tutorial/tree/1df8696/resources/map.rb
  
  <pre>
    on( :get, [ ] ) { redirect "/entries" }
  
    on( :get, [ 'entries' ] ) do
      view( :entry ).list( :entries => [] )
    end
  </pre>
  
  The first declaration matches GET requests to @"/"@, redirecting them to @"/entries"@.  Not coincidentally, this is the path handled by the second declaration.  In that declaration's block, we summon an instance of @Blog::Views::Entry@, then call the view's @list@ method, passing along a hash of variable assigns.  If we had defined @list@ on @Blog::Views::Entry@, the return value of that method would be used as the response body.  Because we have not, the view class attempts to find a template in @templates/entry@.  Views know the file extensions associated with active renderers, so they look for a template file with a basename matching the method name and a known extension.  The assigns hash will be transmuted into instance variables within the renderer context.
  
  Thus we need to create a directory in @templates@ named "entry", and within (because we're using Markaby) a file named "list.mab".  Fill the template file with something like this:
  
  p(commit). "templates/entry/list.mab @ 1df8696":http://github.com/waves/classic-tutorial/tree/1df8696/templates/entry/list.mab
  
  <pre>
    h1 "Entries"
  
    ul do
      @entries do |entry|
        li entry.title
      end
    end
  </pre>
  
  If you visit @ / @ in your brower, you should now be redirected to @/entries@.  Because <code>@entries</code> is an empty array, you won't see much.  The quickest way to scare up some entries at this point is to create them in the Waves console.  So:
  
  <pre>
    $ waves console
    ...
    >> E = Blog::Models::Entry # for your convenience
    >> E.create :title => "I have a blog", :name => "first", 
    ?>  :content => "I am so proud."
    >> E.create :title => "What shall I write?", :name => "now_what", 
    ?>  :content => "I am so bored."
  </pre>
  
  Next, modify the mapping for @/entries@ to use the @Entry@ controller to fetch the entries for us.  Pass the resulting array to the view:
  
  p(commit). "resources/map.rb @ 947dc3c":http://github.com/waves/classic-tutorial/tree/947dc3c/resources/map.rb
  
  <pre>
    on( :get, [ 'entries' ] ) do
      entries = controller( :entry ).all
      view( :entry ).list( :entries => entries )
    end
  </pre>
  
  Refresh @/entries@ in your browser, and you should now see the entry titles in a list.  Links to the individual entries would be nice, as would valid HTML.  Accordingly, modify @templates/entry/list.mab@ so that it wraps itself in the default layout and displays the entry titles as links.
  
  p(commit). "templates/entry/list.mab @ 0ffbf6a":http://github.com/waves/classic-tutorial/tree/0ffbf6a/templates/entry/list.mab
  
  <pre>
    layout :default, :title => 'Blog Entries' do
      ul do
        @entries.each do |entry|
          li { a entry.title, :href => "/entry/#{entry.name}" }
        end
      end
    end
  </pre>
  
  The @layout@ method yields up its block for rendering within the template named by the first argument, located in @templates/layouts@. That second argument to @layout@ is an assigns hash; 'Blog Entries' becomes the value of <code>@title</code>, which the default layout uses for the page title.  Refresh your browser for linked and styled goodness.
  
  Links alone do not a blog make; we want to display content and metadata for each entry, both on individual pages and on the list page.  If we write the display code in a template without a layout, we can insert it as needed in the @list@ view and the @show@ view (that we haven't written yet).
  
  p(commit). "templates/entry/full.mab @ 11c919d":http://github.com/waves/classic-tutorial/tree/11c919d/templates/entry/full.mab
  
  <pre>
    h4 @entry.date if @entry.updated_on
    h2 { a @entry.title, :href => "/entry/#{@entry.name}" }
    textile @entry.content
  </pre>
  
  Modify the @list@ template to iterate over the entries, splicing in the @full@ template, by using the @view@ method:
  
  p(commit). "templates/entry/list.mab @ 11c919d":http://github.com/waves/classic-tutorial/tree/11c919d/templates/entry/list.mab
  
  <pre>
    layout :default, :title => 'Blog Entries' do
      @entries.each do |entry|
        div.entry do
          view :entry, :full, :entry => entry
          p do
            a entry.comment_number, :href => "/entry/#{entry.name}"
          end
        end
      end
    end
  </pre>
  
  The first argument to @view@ is the name of the view, and the second argument is the template name.  The third is an assigns hash, where the elements become instance variables for the template.  Refresh your browser to see a page that looks decidedly more like a blog.  The links take you right down to 404 Avenue, though.
  
  There are two major pieces missing from the functionality we've seen so far.  The first deals with what might be called "path component capture".  That is to say, how do we capture a piece of a URL path as a parameter?  The plan for the application API laid out in "Part 1":/classic-tutorial-1 denoted individual entries using a path of @/entry/some-name-or-other@.  We need a way to access the value of the second path component, so that we can retrieve the entry named "some-name-or-other".
  
  The second involves the resource-oriented structure of the application; we've been processing all requests within @Blog::Resources::Map@, when the actual resources we're operating on are _entries_.  Waves resources can delegate to other resources, which makes the request mappings easier to handle and allows you to summon controllers and views without the need to specify which class.
  
  _More to come_  
  
  h2. Path matching and component capture
  
  Waves treats the URL path, for matching purposes, as an array of components demarcated by slashes.  The literal and greedy-wildcard syntax you have already seen.  To recap, the following arrays, given to an @on@ declaration as path matchers, would match requests to @/klaatu/barada/nikto@:
  
  <pre>
    [ "klaatu", "barada", "nikto" ]
    [ "klaatu", "barada", true ]
    [ "klaatu", true ]
  </pre>
  
  You can also use regexes to match against individual components:
  
  <pre>
    [ "klaatu", /(ve|ba)rada/, "nikto"]
  </pre>
  
  A symbol matches anything, and it captures the component value for use in request processing. In the example below, assuming a request to @/klaatu/barada/nikto@, the value "klaatu" will be stored as @captured.alien_name@
  
  <pre>
    [ :alien_name, "barada", "nikto" ]
  </pre>
  
  Single-element hashes (with symbols as keys) act as capturing component matchers in various interesting ways.  Currently meaningful values include regexes, strings, and @true@.
  
  If the matcher value is a regex, the corresponding component is only captured if it matches the regex.
  
  <pre>
    [ "klaatu", "barada", { :n_word => /^n\w+/ } ]
  </pre>
  
  String values act as defaults for missing components.  As such, they only work on the last components of path matchers.
  
  <pre>
    [ "klaatu", "barada", { :n_word => 'cough' } ]
  </pre>
  
  The above example will match @/klaatu/barada/nikto@, storing "nikto" in @captured.n_word@, but it will also match @/klaatu/barada@, storing "cough" in @captured.n_word@
  
  When you use @true@ as the matcher value, all remaining component values are captured as an array.
  
  <pre>
    [ "klaatu", "barada", { :n_word => true } ]
  </pre>
  
  This example will match @/klaatu/barada/nikto@, storing @['nikto']@ as @captured.n_word@.  
  
  It will also match @/klaatu/barada/necktie/nectar/nickel@, capturing the value as @[ 'necktie', 'nectar', 'nickel' ]@
  
  
  h2. Resource delegation  
  
  Our application currently has the @Map@ resource processing all requests, even though it needs the @Entry@ controller and view.  We need to cause @Map@ to delegate these requests to @Blog::Resources::Entry@.  Doing so helps us separate our concerns, simplifies the mapping in the primary resource, and allows the @Entry@ resource to call up the associated controller and view without needing to specify their names.  A resource may delegate a request using @to@ in the block given to an @on@ declaration.  Create @lib/resources/entry.rb@ using rake:
  
  <pre>
    $ rake generate:resource name=entry
  </pre>
  
  Add the @on@ declaration for @/entries@ to the @Entry@ resource:
  
  p(commit). "resources/entry.rb @ 0a78e54":http://github.com/waves/classic-tutorial/tree/0a78e54/resources/entry.rb
  
  <pre>
    module Blog
      module Resources
        class Entry < Default
  
          on( :get, [ 'entries' ] ) do
            entries = controller.all
            view.list( :entries => entries )
          end
  
        end
      end
    end
  </pre>
  
  The @controller@ and @view@ methods here do not need an argument specifying which kind to instantiate, because we are now working within the @Entry@ resource.
  
  Next, @Blog::Resources::Map@ should delegate all requests for blog entries to @Blog::Resources::Entry@.  In our scheme, this means it should pass the buck on all requests to @/entries@ and @/entry/<name>@:
  
  p(commit). "resources/map.rb @ 0a78e54":http://github.com/waves/classic-tutorial/tree/0a78e54/resources/map.rb
  
  <pre>
    on( :get, [ ] ) { redirect "/entries" }
  
    on( true, [ "entries" ] ) { to :entry }
  
    on( true, [ "entry", true ] ) { to :entry }
  </pre>
  
  Given that our app scheme only handles requests to @/entries@ and @/entry/<name>@, we could have written simply:
  
  <pre>
    on( true, [ true ] ) { to :entry }
  </pre>
  
  This would delegate any request that has at least one path component (i.e. any path other than @/@) to @Entry@.  We're not going to use this kind of catch-all, because we may want to add other resources later, such as authors, tags, etc.  If we truly wanted a one-resource application, we would dispense with @Map@ altogether by declaring in the configuration that @Entry@ is the primary resource.
  
  "Part 3":/classic-tutorial-3
summary: ""
key: classic-tutorial-2
