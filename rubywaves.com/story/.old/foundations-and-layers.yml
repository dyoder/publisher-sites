--- 
format: textile
title: Foundations And Layers
author: Dan Yoder
published: 2008-11-06 00:00:00 -08:00
tags: ""
content: |-
  A _Layer_ in Waves is a module that adds or changes features of the framework on behalf of your application. A _Foundation_ is any Layer that will allow an application to run without any additional Layers.
  
  If you've followed any of the "tutorials":/tutorials or "other articles":/home#articles, you know that the simplest possible Foundation is @Compact@:
  
  <pre>
  require 'foundations/compact'
  module TeaTime
    include Waves::Foundations::Compact
  end
  </pre>
  
  Noice the @require@ statement there ... one nice thing about Layers is that, by convention, things that can be placed in Layers are not included in the core framework (i.e., what you get when you @require 'waves'@). You only pay for what you actually use.
  
  h2. Looking Inside A Foundation
  
  Let's take a look at the Classic Foundation to see what it does.
  
  <pre>
  module Waves
    module Foundations
      module Classic
        def self.included( app )
          require 'autocode'
          require 'layers/mvc'
          require 'layers/inflect/english'
          require 'helpers/extended'
          require 'layers/renderers/erubis'
  </pre>
  
  We can see that it overrides the module's @included@ method and then @requires@ all the code it is going to need. As you can see, Autocode (code-reloading), MVC, inflection support, view helpers, and ERb are not included in the core design of Waves.
  
  <pre>
  app.module_eval do
  
    include AutoCode
  
    app.auto_create_module( :Configurations ) do
      include AutoCode
      auto_create_class :Default, Waves::Configurations::Default
      auto_load :Default, :directories => [ :configurations ]
    end
  </pre>
  
  Next, we call @module_eval@ on the application module that include us. We begin setting up AutoCode definitions. This one says, "if a Default configuration doesn't exist, try to load it from a file or, failing that, create one based on the Waves default."
  
  There are a number of other such declarations, which we won't go into here. Basically, they are setting up the code-(re)loading and just-in-time creation conventions for the application. Again, with a little bit of study, you could create your own Foundation with different conventions.
  
  Let's take a look a bit further down.
  
  <pre>
  app.auto_eval( :Resources ) do
    auto_create_class true, app::Resources::Default
    auto_load true, :directories => [ :resources ]
    auto_eval :Map do
  
      handler( Waves::Dispatchers::NotFoundError ) do
        app::Views::Errors.new( request ).not_found_404
      end
  
    end
  end
  </pre>
  
  Here we've not only set up code-(re)loading / just-in-time creation conventions for Resources, but we've also added a default error handler for NotFoundErrors, which renders the application's view correspondng to @not_found_404@.
  
  Next, we add some other Layers, which in turn, will each do their thing:
  
  <pre>
  include Waves::Layers::Inflect::English
  include Waves::Layers::MVC
  include Waves::Renderers::Erubis   
  </pre>
  
  h2. Layers That Modify Waves
  
  In just three lines, we've added inflection support, MVC support, and a rendering engine for ERb-style templates. Wow. But let's keep digging. What does the MVC Layer do?
  
  <pre>
  module Waves
    module Layers
      module MVC
  
        def self.included( app )
  
          require 'layers/mvc/extensions'
          require 'layers/mvc/controllers'
  
  </pre>
  
  Again, we see the familiar pattern of defining the @included@ method on the application module and then loading in some new code that we will need to use for this Layer. Let's stop here, though and take a look at what @layers/mvc/extensions@ is doing.
  
  <pre>
  module Waves
    module Resources
      module Mixin
        def controller( resource = nil )
          resource ||= self.class.basename
          @controller ||= app::Controllers[ resource ].new( @request )
        end
        def view( resource = nil )
          resource ||= self.class.basename
          @view ||= app::Views[ resource ].new( @request )
        end
      end
    end
  </pre>
  
  Woah. We're re-opening Waves itself and adding stuff in? Yep. This is perfectly legal for a Layer to do. Here, the MVC Layer happily adds in some helper methods for use within Resources to access controllers and views from within the application. Further down, we can see more such tomfoolery.
  
  h2. Layer And Foundation Etiquette
  
  The basic rules for a Layer are quite simple: define the @included@ hook, require necessary additional code, and modify the application module or even Waves to incorporate the new features. 
  
  For a Foundation, the rules are just a bit more involved, since a Foundation is basically guaranteeing that there is enough for an application to run just by including it.
  
  Basically, a Foundation must define an application's @Configurations@ module, and within it, "configuration classes":/configurations corresponding to whatever configurations you will run it as (by convention, you should at least provide a @Development@ configuration because that is the default option for the @waves server@ command). 
  
  It must also define a Resources module for the application, and, within that, at least one "Resource class":/resource-oriented that is referenced by the configuration(s) as the application Resource.
  
  h2. Future Enhancements
  
  Waves' Layers have some further improvements coming in future releases, including a number of things to help make it easier for developers to create Layers. We will also be creating a Layers Development Guide to help as well.
  
  h2. Layers Are Just Modules
  
  However, at their heart, the beauty of Layers is that they are simply Ruby modules, using the standard Ruby hook for mixing in features into a module, which in this case, happens to be an application. No additional "plug-in" or "component" interfaces are required.
key: foundations-and-layers
